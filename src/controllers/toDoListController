import { storageAvailable, storeData, retrieveData, clearStorage } from "./storageController.js";

import User from "../model/User.js";
import Task from "../model/Task.js";
import Project from "../model/Project.js";
import projectController from "./projectController.js"
import TaskController from "./taskController.js";

export default function todoListController(userName){

    let user = new User(userName);
    const pjController = projectController();
    const taskController = TaskController();
    let currentProject;
    let currentTask;

    const store = function (storageName, data) {
        if (storageAvailable("localStorage")){
            storeData(storageName, data);
        }
    }

    const retrieve = function (storageName) {
        if (storageAvailable("localStorage")){
            return retrieveData(storageName);
        }
        return null;
    }


    if (userName.length !== 0){

        let data = retrieve(userName) || "";
        if(!data){
            store(userName, JSON.stringify(user));
        }
        data = JSON.parse(retrieve(userName) || "");
        Object.assign(user,data);
    }

    const createProject = function(projectName, projectDescription){

        const objProject = pjController.createProject(user, projectName, projectDescription);
        currentProject = objProject.currentProject;
        if (currentProject){
            store(userName, JSON.stringify(user));
        }
        return objProject;
        
    }

    const selectProject = function(projectName){
        const objProject = pjController.selectProject(user,projectName);
        const lastProject = currentProject;
        currentProject = objProject.currentProject;
        if(currentProject){
            return objProject;
        }
        objProject.currentProject = lastProject;
        return objProject;
    }

    const deleteProject = function(projectName){
        const objProject = pjController.deleteProject(user,projectName);
        currentProject = null;
        user.setProjectList(objProject.projects);
        store(userName, JSON.stringify(user));
        return objProject;
    }

    const createTask = function(taskName, taskDescription, taskDueDate, taskPriority){
        const objTask = taskController.createTask(currentProject, taskName, taskDescription, taskDueDate, taskPriority);
        currentTask = objTask.currentTask;
        if (currentTask){
            store(userName, JSON.stringify(user));
        }
        return objTask;
    }

    const selectTask = function(taskName){
        const objTask = taskController.selectTask(currentProject,taskName);
        const lastTask = currentTask;
        currentTask = objTask.currentTask;
        if(currentTask){
            return objTask;
        }
        objTask.currentTask = lastTask;
        return objTask;
    }

    const deleteTask = function(taskName){

        let pj = new Project();
        if(!(currentProject instanceof Project)){
            Object.assign(pj,currentProject);
            currentProject = pj;
        }
        const objTask = taskController.deleteTask(currentProject,taskName);
        currentTask = null;
        currentProject.setTaskList(objTask.Tasks);
        const projectList = user.getProjectList().map(element => {
            let project = new Project("","");
                if(!(element instanceof Project)){
                    Object.assign(project, element);
                    
                }else{
                    project = element;
                }
            if (project.getProjectTitle() === currentProject.getProjectTitle()){
                return currentProject;
            }
            return project;
        });
        user.setProjectList(projectList);
        store(userName, JSON.stringify(user));
        return objTask;
    };

    const getCurrentUser = () => {return user};

    const getCurrentProject = () =>{return currentProject};

    const getCurrentTask = () => {return currentTask};

    const clearUser = () => {
        user.setProjectList([]);
        clearStorage();
    }

    const updateProject = (newDescription) => {

        if(currentProject){
            const tempPj = new Project();
            Object.assign(tempPj, currentProject);
            currentProject = tempPj;
            currentProject.setProjectDescription(newDescription);

            const projectList = user.getProjectList().map(element => {
                let project = new Project("","");
                    if(!(element instanceof Project)){
                        Object.assign(project, element);
                        
                    }else{
                        project = element;
                    }
                if (project.getProjectTitle() === currentProject.getProjectTitle()){
                    return currentProject;
                }
                return project;
            });
            user.setProjectList(projectList);
            store(userName, JSON.stringify(user));
            return user;
        }
        

    }

    const updateTask = (newDescription,newDueDate,newPriority,newStatus) => {
        if (currentTask && currentProject){
            const tempPj = new Project();
            Object.assign(tempPj, currentProject);
            currentProject = tempPj;

            const tempTask = new Task();
            Object.assign(tempTask,currentTask);
            currentTask = tempTask;

            currentTask.setTaskDesc(newDescription);
            currentTask.setTaskDueDate(newDueDate);
            currentTask.setPriority(newPriority);
            currentTask.setStatus(newStatus);

            const taskList = currentProject.getTaskList().map(element =>{
                let task = new Task();
                if (!(element instanceof Task)){
                    Object.assign(task,element);
                }else{
                    task = element;
                }
                if(task.getTaskTitle() === currentTask.getTaskTitle()){
                    return currentTask;
                }
                return task;
            });

            currentProject.setTaskList(taskList);

            const projectList = user.getProjectList().map(element => {
                let project = new Project("","");
                    if(!(element instanceof Project)){
                        Object.assign(project, element);
                        
                    }else{
                        project = element;
                    }
                if (project.getProjectTitle() === currentProject.getProjectTitle()){
                    return currentProject;
                }
                return project;
            });
            user.setProjectList(projectList);
            store(userName, JSON.stringify(user));
            return user;
        }
    }

    return {
        createProject,
        selectProject,
        getCurrentUser,
        getCurrentProject,
        getCurrentTask,
        clearStorage,
        deleteProject,
        createTask,
        selectTask,
        deleteTask,
        updateProject,
        updateTask,
    }

}


