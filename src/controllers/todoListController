import { storageAvailable, storeData, retrieveData, clearStorage } from "./storageController.js";

import User from "../model/User.js";
import ProjectController from "./projectController.js"
import TaskController from "./taskController.js";

export default function todoListController(userName) {

    let user = new User(userName);
    const pjController = ProjectController();
    const taskController = TaskController();
    let currentProject;
    let currentTask;

    const store = function (storageName, data) {
        if (storageAvailable("localStorage")) {
            storeData(storageName, data);
        }
    }

    const retrieve = function (storageName) {
        if (storageAvailable("localStorage")) {
            return retrieveData(storageName);
        }
        return null;
    }


    if (userName.length !== 0) {

        let data = retrieve(userName) || "";
        if (!data) {
            store(userName, JSON.stringify(user));
        }
        data = JSON.parse(retrieve(userName) || "");
        user = User.fromJSON(data);
        console.log(user);
    }

    const createProject = function (projectName, projectDescription) {

        if (user) {
            const objProject = pjController.createProject(user, projectName, projectDescription);
            currentProject = objProject.currentProject;
            if (currentProject) {
                store(userName, JSON.stringify(user));
            }
            return objProject;
        }
        return null;


    }

    const selectProject = function (projectName) {

        if (user) {
            const objProject = pjController.selectProject(user, projectName);
            const lastProject = currentProject;
            currentProject = objProject.currentProject;
            if (currentProject) {
                return objProject;
            }
            objProject.currentProject = lastProject;
            return objProject;
        }
        return null;

    }

    const deleteProject = function () {

        if (user && currentProject) {
            const objProject = pjController.deleteProject(user, currentProject.title);
            currentProject = null;
            user.projects = objProject.projects;
            store(userName, JSON.stringify(user));
            return objProject;
        }
        return null;

    }

    const updateProject = (newDescription) => {

        if (currentProject) {
            currentProject.description = newDescription;
            store(userName, JSON.stringify(user));
            return user;
        }
        return null;


    }

    const createTask = function (taskName, taskDescription, taskDueDate, taskPriority) {

        if (user && currentProject) {
            const objTask = taskController.createTask(currentProject, taskName, taskDescription, taskDueDate, taskPriority);
            currentTask = objTask.currentTask;
            if (currentTask) {
                store(userName, JSON.stringify(user));
            }
            return objTask;
        }
        return null;

    }

    const selectTask = function (taskName) {

        if (user && currentProject) {
            const objTask = taskController.selectTask(currentProject, taskName);
            const lastTask = currentTask;
            currentTask = objTask.currentTask;
            if (currentTask) {
                return objTask;
            }
            objTask.currentTask = lastTask;
            return objTask;
        }
        return null;

    }

    const deleteTask = function () {

        if (user && currentProject && currentTask) {
            const objTask = pjController.deleteTask(currentProject, currentTask.title);
            currentTask = null;
            store(userName, JSON.stringify(user));
            return objTask;
        }
        return null;

    };

    const updateTask = (newDescription, newDueDate, newPriority, newStatus) => {
        if (currentTask && currentProject) {
            currentTask.description = newDescription;
            currentTask.dueDate = newDueDate;
            currentTask.priority = newPriority;
            currentTask.status = newStatus;
            store(userName, JSON.stringify(user));
            return user;
        }
        return null;
    }

    const getCurrentUser = () => {
        if (user) {
            return user;
        }
        return null;
    };

    const getCurrentProject = () => {
        if (currentProject) {
            return currentProject;
        }
        return null;

    };

    const getCurrentTask = () => {
        if (currentTask) {
            return currentTask;
        }
        return null;

    };

    const clearUser = () => {
        user.projects = [];
        clearStorage();
    }





    return {
        createProject,
        selectProject,
        getCurrentUser,
        clearStorage,
        deleteProject,
        createTask,
        selectTask,
        deleteTask,
        updateProject,
        updateTask,
    }

}


